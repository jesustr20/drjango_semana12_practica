*******************************
**********CON DOTENV***********
*******************************
python -m venv myven (entorno virtual)
pip install Flask (instalamos flask)
pip install Flask && pip freeze > requeriments.txt (deply de lo que se instala)
set "FLASK_ENV=developmen" (Pasar de "PRODUCCION" a "DESARROLLADOR")
pip install python-dotenv (esta libreria nos ayudara a mantener una mejor administracion y configuracion para la app)
pip install python-dotenv && pip freeze > requeriments.txt
pymysql (mysql db) o psycopg2 (postgresql db)


*******************************
***********CON ORM*************
*******************************
python -m venv myven (entorno virtual)
pip install Flask (instalamos flask)
pip install Flask && pip freeze > requeriments.txt (deply de lo que se instala)
set "FLASK_ENV=developmen" (Pasar de "PRODUCCION" a "DESARROLLADOR")
pip install python-dotenv (esta libreria nos ayudara a mantener una mejor administracion y configuracion para la app)
pip install python-dotenv && pip freeze > requeriments.txt
pymysql (mysql db) o psycopg2 (postgresql db)
ORM orator:
pip install orator && pip freeze > requeriments.txt

-> instalar requeriments.txt = pip install -r requeriments.txt

nota:
instalar -  pip install cryptography

******************************
creando el modelo con comando:
******************************
-> orator make:model users

********************************
dentro de una carpeta existente:
********************************
-> orator make:model -p app/models

*******************************************************
Creacion de carpeta migrations + el nombre de la tabla:
*******************************************************
->orator make:migration create_users_table  --table=users --create

*************************
Ejecutar las migraciones:
*************************
orator migrate -c database/orator.py
(le damos en 'yes')

*mirar los codigos: orator

*ver el status: orator migrate:status -c database/orator.py

*******************
generar el seeder:
*******************

orator make:seed user_table_seeder

*********************
ejecutar los seeder:
*********************

orator db:seed -c database/orator.py


*************************************
*******JSON WEB TOKEN - JWT**********
*************************************

pip install PyJWT && pip freeze > requeriments.txt


///////////////////////////////////////////////
**********************************************
//////////////////////////////////////////////
***************** DJANGO *******************
///////////////////////////////////////////////
**********************************************
//////////////////////////////////////////////
python -m venv myven (entorno virtual)
pip install Flask (instalamos flask)
pip install Flask && pip freeze > requirements.txt (deply de lo que se instala)
set "FLASK_ENV=developmen" (Pasar de "PRODUCCION" a "DESARROLLADOR")
pip install python-dotenv (esta libreria nos ayudara a mantener una mejor administracion y configuracion para la app)
pip install python-dotenv && pip freeze > requirements.txt
pymysql (mysql db) o psycopg2 (postgresql db)
pip install python-dotenv pymysql Django && pip install > requirements.txt

-> instalar requeriments.txt = pip install -r requeriments.txt

-> pip install django
///////////////////////////////
*****crear proyecto Django:****
///////////////////////////////

django-admin startproject pachaqtec . (el punto definira donde quiere que se crea la carpeta de django)

//////////////////////
****Iniciar Django:***
//////////////////////
python manage.py runserver


********************
NOTA:
********************
1: crear uan estructura
2: definir variables globales
3: iniciar con los modelos y hacer paso a las migraciones


DJANGO:

crear la primera app:

python manage.py startapp news_center

//////////////////////////////////////////////////////////////
Pasos para agregar en la raiz del proyecto al crear una apps:
//////////////////////////////////////////////////////////////

1: Crear el proyecto: django
->django-admin startproject pachaqtec .
2: Crear la apps "news_center
-> python manage.py startapp "nombre de la app"

//////////////////////////////
*****migracion de la app*****
//////////////////////////////
luego de hacer las configuraciones migrarlas:

1: python manage.py makemitrations

-> python manage.py migrate

/////////////////////////////
*****Crear super usuario****
/////////////////////////////
python manage.py createsuperuser

//////////////////////////////////
*********creamos una app*********
//////////////////////////////////
python manage.py startapp news_center

agregamos la app en "settings -> installed apps"

////////////////////////////////////////////
******luego de configurarlos models*********
////////////////////////////////////////////

python manage.py makemigrations news_center


////////////////////////////////////////////
*****luego migramos nuestro proyecto*******
////////////////////////////////////////////

python manage.py migrate
